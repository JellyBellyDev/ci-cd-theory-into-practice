stages:
  - build
  - test
  - prepare
  - deploy
  - rollback

default:
  image: jellybellydev/ci-cd-theory-into-practice:latest

install-deps:
  stage: build
  script:
    - composer install
  artifacts:
    expire_in: 3 hours
    untracked: true
    paths:
      - bin/**
      - config/**
      - public/**
      - src/**
      - vendor/**
      - .env
      - .php_cs.dist
      - composer.json
      - composer.lock
      - symfony.lock

php-cs-fixer:
  stage: test
  dependencies:
    - install-deps
  script:
    - vendor/bin/php-cs-fixer fix --verbose --diff --dry-run

lint-yaml-config:
  stage: test
  dependencies:
    - install-deps
  script:
    - bin/console lint:yaml config

phpunit:
  stage: test
  dependencies:
    - install-deps
  script:
    - bin/phpunit

phpunit-coverage:
  stage: test
  dependencies:
    - install-deps
  script:
    - XDEBUG_MODE=coverage bin/phpunit --colors=never --coverage-text


.prepare_template: &prepare_template
  script:
    - composer install --no-dev --optimize-autoloader
    - composer dump-autoload --no-dev --classmap-authoritative
    - composer dump-env
    - echo "export CI_JOB_ID_ARTIFACTS=\"$(echo "$CI_JOB_ID")\"" > gitlab_variables
  artifacts:
    expire_in: 3 hours
    untracked: true
    paths:
      - bin/**
      - config/**
      - public/**
      - src/**
      - vendor/**
      - .env
      - .env.local
      - .env.local.php
      - composer.json

prepare:staging:
  stage: prepare
  <<: *prepare_template
  before_script:
    - echo "APP_ENV=staging" >> .env.local
  only:
    - master

prepare:production:
  stage: prepare
  <<: *prepare_template
  before_script:
    - echo "APP_ENV=prod" >> .env.local
  only:
    - tags

.deploy_template: &deploy_template
  image: spy86/ansible:latest
  before_script:
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in DEPLOY_PRIVATE_KEY variable to the agent store
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Verifying the SSH host keys
    - ssh-keyscan -H $HOST_FOR_SSH_KEYSCAN >> ~/.ssh/known_hosts
    - if [[ -f gitlab_variables ]]; then source gitlab_variables; fi
    - cd ansible-deploy
    - 'echo "gitlab_access_token: \"${GITLAB_ACCESS_TOKEN_API}\"" > user-vars.yml'
    - 'echo "telegram_token: \"${TELEGRAM_TOKEN}\"" > user-vars.yml'
    - 'echo "telegram_chat_id: \"${TELEGRAM_CHAT_ID}\"" > user-vars.yml'


deploy:staging:
  stage: deploy
  variables:
    HOST_FOR_SSH_KEYSCAN: "161.97.172.133"
    DEPLOY_PRIVATE_KEY: $MY_DEPLOY_PRIVATE_KEY
  dependencies:
    - prepare:staging
  <<: *deploy_template
  script:
    - echo "Deploy of $CI_COMMIT_REF_NAME on staging server"
    - ansible-playbook deploy.yml -i inventories/staging -e "app_version=$CI_COMMIT_REF_NAME ci_job_id=$CI_JOB_ID_ARTIFACTS"
  only:
    - master

rollback:staging:
  stage: rollback
  variables:
    HOST_FOR_SSH_KEYSCAN: "161.97.172.133"
    DEPLOY_PRIVATE_KEY: $MY_DEPLOY_PRIVATE_KEY
  when: manual
  dependencies: []
  <<: *deploy_template
  script:
    - echo "Rollback of $CI_COMMIT_REF_NAME on staging server"
    - ansible-playbook rollback.yml -i inventories/staging
  only:
    - master


deploy:production:
  stage: deploy
  variables:
    HOST_FOR_SSH_KEYSCAN: "161.97.172.133"
    DEPLOY_PRIVATE_KEY: $MY_DEPLOY_PRIVATE_KEY
  when: manual
  dependencies:
    - prepare:production
  <<: *deploy_template
  script:
    - echo "Deploy of $CI_COMMIT_REF_NAME on production server"
    - ansible-playbook deploy.yml -i inventories/production -e "app_version=$CI_COMMIT_TAG ci_job_id=$CI_JOB_ID_ARTIFACTS"
  only:
    - tags

rollback:production:
  stage: rollback
  variables:
    HOST_FOR_SSH_KEYSCAN: "161.97.172.133"
    DEPLOY_PRIVATE_KEY: $MY_DEPLOY_PRIVATE_KEY
  when: manual
  dependencies: []
  <<: *deploy_template
  script:
    - echo "Rollback of $CI_COMMIT_TAG on production server"
    - ansible-playbook rollback.yml -i inventories/production
  only:
    - tags
