- name: Test connection
  ping:

- name: Initialize deployment helper
  deploy_helper:
    path: "{{ home_path }}"
    release: "{{ release_name }}"
    state: present

- name: Create new release path
  file:
    path: "{{ deploy_helper.new_release_path }}"
    state: directory

# Automatic Deploy
- name: Download artifact from gitlab with artifact_url_ci
  unarchive:
    src: "{{ artifact_url_ci }}"
    dest: "{{ deploy_helper.new_release_path }}"
    remote_src: yes
  when: ci_job_id is defined

# Bonus: Manual Deploy by CLI not in CI
- name: Download artifact from gitlab with artifact_url
  unarchive:
    src: "{{ artifact_url }}"
    dest: "{{ deploy_helper.new_release_path }}"
    remote_src: yes
  when: ci_job_id is not defined

- name: Add an unfinished file, to allow cleanup on successful finalize
  file:
    path: "{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}"
    state: touch

- name: Clean var/ content
  file:
    path: "{{ deploy_helper.new_release_path }}/var/"
    state: absent

- name: Setup directory permissions for var/
  file:
    path: "{{ deploy_helper.new_release_path }}/var/"
    state: directory
    mode: 0775
    recurse: true

- name: Setfacl var folder permissions
  shell: HTTPDUSER=`ps axo user,comm | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d ' ' -f1` &&
    setfacl -dR -m u:"$HTTPDUSER":rwX -m u:$(whoami):rwX {{ deploy_helper.new_release_path }}/var &&
    setfacl -R -m u:"$HTTPDUSER":rwX -m u:$(whoami):rwX {{ deploy_helper.new_release_path }}/var

- name: Check previous release {{ current_path }} already exists
  stat: path="{{ current_path }}"
  register: previous_release_path_status

- name: Remove previous link
  file:
    state: absent
    path: "{{ current_prev_path }}"
  when: previous_release_path_status.stat.exists

- name: Create previous link
  file:
    src: "{{ current_path }}"
    dest: "{{ current_prev_path }}"
    state: hard
  when: previous_release_path_status.stat.exists

- name: Check cachetool.phar already exists
  stat: path="{{deploy_helper.shared_path}}/cachetool.phar"
  register: stat_cachetool_result

- name: Download cachetool.phar
  get_url:
    url: "https://gordalina.github.io/cachetool/downloads/cachetool-6.1.1.phar"
    dest: "{{deploy_helper.shared_path}}/cachetool.phar"
    mode: '+x'
  when: not stat_cachetool_result.stat.exists

- name: Finalize the deployment
  deploy_helper:
    path: "{{ home_path }}"
    current_path: "{{ current_path }}"
    release: "{{ deploy_helper.new_release }}"
    state: finalize
    keep_releases: 3
  notify:
    - cachetool_opcache_reset
    - send_notify_telegram

- name: Check app status
  uri:
    url: "http://localhost/healthz"
    method: GET
    headers:
      Host: "{{ check_host }}"
    status_code: 200
    return_content: yes
  register: webpage

- name: Fail if OK is not in the page content
  fail:
  when: "'OK' not in webpage.content"
